function [] = urpec_writeJob(config)
%urpec_writeJob creates a job file using proximity effect corrected .dxf file generated by urpec
%   Job files are created by editing a job fie template. Currently, the
%   only supported template is for NPGS, but others can be added with ease.
%   Function works by opening job file template and doing a search and
%   replace for the various config fields, so adding relevant parameters to
%   new job files is trivial.
%
%   IMPORTANT NOTE FOR NPGS JOBS: The dwell time associated with the area
%   dose does not get autoupdated from the template value when generating the job file. One could code this in, as it is
%   proportional to the dose and current, but it will automatically update
%   when the user inputs the measured current during the write, which
%   he/she should do prior to writing anyways. For this reason, it can be
%   ignored in the job file. One may also want to remember to add/edit aperture offsets
%   during the write.
%
%
%   config is a struct with the following optional fields:
%       dxf (string): .dxf file
%       platform (string): specifies software for EBL. Currently only supports
%       'NPGS'
%       template (string): template for run file. NGPS run files are
%       .RF6
%       dtc (string): dose to clear in uC/cm^2
%       init_move_x (string): initial stage movement in x direction
%       init_move_y (string): initial stage movement in y direction
%       final_move_x (string): final stage movement in x direction
%       final_move_y (string): final stage movement in y direction
%       am_aperture (double): size of aperture for small features in
%       microns (relies on aperture position numbering in SEM...)
%       lg_aperture (double): size of aperture for large features in
%       microns (relies on aperture position numbering in SEM...)
%       al_mag_sm (string): magnification for small alignment
%       al_mag_med (string): magnification for medium alignment
%       al_mag_lg (string): magnification for coarse alignment
%       write_mag_sm (string): magnification for writing small features
%       write_mag_lg (string): magnification for writing large features
%
%
%   Example config for 6 entity NPGS job file doing a 3 mag alignment and 2 aperture/2 mag write:
%       config=struct;
%       config.platform = 'NPGS'
%       config.template = 'Job_NPGS_6Entity_Template.RF6'
%       config.dtc = '400'
%       config.init_move_x = '105'
%       config.init_move_y = '-12'
%       config.final_move_x = '-747'
%       config.final_move_y = '-123'
%       config.am_aperture = 7.5
%       config.lg_aperture = 30
%       config.al_mag_sm = '1500'
%       config.al_mag_med = '800'
%       config.al_mag_lg = '235'
%       config.write_mag_sm = '1500'
%       config.write_mag_lg = '600'
%
%
% Elliot Connors (econnors@ur.rochester.edu) 3/2019


% --------------------------------------
% CONFIG
% --------------------------------------

%TODO:
% 1. Dose array config/template

if ~exist('config','var')
    config=struct();
end

config = def(config,'platform','NPGS');
config = def(config,'template','C:\Users\Nichol\Box Sync\Nichol Group\Matlab\urpec\example stuff\job_NPGS_NG_StandardWrite_Template.RF6');


temp_ind = regexp(config.template,'\');
if ~isempty(temp_ind)
    templateID = config.template(max(temp_ind)+1:end-4);
else
    templateID = config.template;
end

switch templateID
    case 'job_NPGS_NG_StandardWrite_Template'
        display(['Creating job using ' templateID]);
        
        % default values for this template (based on Si devices on 3/12/19)
        config = def(config,'dtc','400');
        config = def(config,'init_move_x','105');
        config = def(config,'init_move_y','-12');
        config = def(config,'final_move_x','-747');
        config = def(config,'final_move_y','-123');
        config = def(config,'sm_aperture',7.5);
        config = def(config,'lg_aperture',30);
        config = def(config,'al_mag_sm','1500');
        config = def(config,'al_mag_med','800');
        config = def(config,'al_mag_lg','235');
        config = def(config,'write_mag_sm','1500');
        config = def(config,'write_mag_lg','600');
        
        % if did not pass array to urpec_writeJob... choose arrays for doses
        display('Please choose layer doses for small features...');
        [baseName, folder] = uigetfile('*.txt');
        file_sm_doses = fullfile(folder, baseName);
        sm_doses_tab = readtable(file_sm_doses);
        sm_doses = sm_doses_tab(:,1);
        sm_doses = table2array(sm_doses);
        
        display('Please choose layer doses for med features...');
        [baseName, folder] = uigetfile('*.txt');
        file_med_doses = fullfile(folder, baseName);
        med_doses_tab = readtable(file_med_doses);
        med_doses = med_doses_tab(:,1);
        med_doses = table2array(med_doses);
        
        display('Please choose layer doses for lg features...');
        [baseName, folder] = uigetfile('*.txt');
        file_lg_doses = fullfile(folder, baseName);
        lg_doses_tab = readtable(file_lg_doses);
        lg_doses = lg_doses_tab(:,1);
        lg_doses = table2array(lg_doses);
        
        %convert dose percentages to actual doses using config.dtc
        sm_doses = sm_doses*str2num(config.dtc);
        med_doses = med_doses*str2num(config.dtc);
        lg_doses = lg_doses*str2num(config.dtc);
        
        
        if ~isfield(config,'template')
            display('Please choose a job file template.');
            config.template = uigetfile;
        end
        
        % define required fields for each template
        switch config.template
            case 'job_NPGS_NG_StandardWrite_Template.RF6';
                reqFields = {'dtc','init_move_x','init_move_y','final_move_x',...
                    'final_move_y','am_apertureerture','lg_apertureerture','al_mag_sm',...
                    'al_mag_med','al_mag_lg','mag_sm','mag_lg'...
                    };
                for i=1:length(reqFields)
                    if ~isfield(config,reqFields{i})
                        error(['This template requires field ' reqFields{i} ' in the config.']);
                    end
                end
        end
        
        display('Please choose small feature CAD file...');
        [cad_sm,dir] = uigetfile('C:\NPGS\Projects\*.dc2');
        fullCad_sm = fullfile(dir,cad_sm);
        cad_sm=cad_sm(1:end-4);
        display('Please choose med feature CAD file...');
        [cad_med,dir] = uigetfile('C:\NPGS\Projects\*.dc2');
        fullCad_med = fullfile(dir,cad_med);
        cad_med=cad_med(1:end-4);
        display('Please choose lg feature CAD file...');
        [cad_lg,dir] = uigetfile('C:\NPGS\Projects\*.dc2');
        fullCad_lg = fullfile(dir,cad_lg);
        cad_lg=cad_lg(1:end-4);
        
        %find layers in use
        
        cad_sm_t = fileread(fullCad_sm);
        cad_med_t = fileread(fullCad_med);
        cad_lg_t = fileread(fullCad_lg);
        
        scad = strrep(cad_sm_t,' ',''); % remove spaces
        ind = regexp(scad,'DoNotUse'); %find index... layers are right after
        scad = scad(ind:ind+1000); %shorten
        scad(isspace(scad))='x'; %replace blanks with 'x'
        indstart = 9;% starting layers index
        indend = min(regexp(scad,'x212'))-1; %ending layers index
        slstr = scad(indstart:indend); %string of layers used separated with x's
        ind_list = regexp(slstr,'xx'); %list of x locations
        ind_list = ind_list(2:end); % skip layer 0
        slayers = {};
        for i = 1:length(ind_list)
            if i<length(ind_list)
                slayers{length(slayers)+1} = slstr(ind_list(i)+2:ind_list(i+1)-1);
            else
                slayers{length(slayers)+1} = slstr(ind_list(end)+2:end-1);
            end
        end
        
        
        mcad = strrep(cad_med_t,' ',''); % remove spaces
        ind = regexp(mcad,'DoNotUse'); %find index... layers are right after
        mcad = mcad(ind:ind+1000); %shorten
        mcad(isspace(mcad))='x'; %replace blanks with 'x'
        indstart = 9;% starting layers index
        indend = min(regexp(mcad,'x212'))-1; %ending layers index
        mlstr = mcad(indstart:indend); %string of layers used separated with x's
        ind_list = regexp(mlstr,'xx'); %list of x locations
        ind_list = ind_list(2:end); % skip layer 0
        mlayers = {};
        for i = 1:length(ind_list)
            if i<length(ind_list)
                mlayers{length(mlayers)+1} = mlstr(ind_list(i)+2:ind_list(i+1)-1);
            else
                mlayers{length(mlayers)+1} = mlstr(ind_list(end)+2:end-1);
            end
        end
        
        lcad = strrep(cad_lg_t,' ',''); % remove spaces
        ind = regexp(lcad,'DoNotUse'); %find index... layers are right after
        lcad = lcad(ind:ind+1000); %shorten
        lcad(isspace(lcad))='x'; %replace blanks with 'x'
        indstart = 9;% starting layers index
        indend = min(regexp(lcad,'x212'))-1; %ending layers index
        llstr = lcad(indstart:indend); %string of layers used separated with x's
        ind_list = regexp(llstr,'xx'); %list of x locations
        ind_list = ind_list(2:end); % skip layer 0
        llayers = {};
        for i = 1:length(ind_list)
            if i<length(ind_list)
                llayers{length(llayers)+1} = llstr(ind_list(i)+2:ind_list(i+1)-1);
            else
                llayers{length(llayers)+1} = llstr(ind_list(end)+2:end-1);
            end
        end
        
        slayers;
        mlayers;
        llayers;
        
        
        %aperture list for URNano Zeiss Supra SEM:
        % 1 - 30um
        % 2 - 7.5um
        % 3 - 10um
        % 4 - 40um
        % 5 - 60um
        % 6 - 120um
        
        switch config.sm_aperture
            case 30
                sm_aperture_current = '445.0';
                sm_aperture = '1';
                
            case 7.5
                sm_aperture_current = '17.0';
                sm_aperture = '2';
                
            case 10
                sm_aperture_current = '38.0';
                sm_aperture = '3';
                
            case 40
                sm_aperture_current = '600';
                sm_aperture = '4';
                
            case 60
                sm_aperture_current = '1000';
                sm_aperture = '5';
                
            case 120
                sm_aperture_current = '6000';
                sm_aperture = '6';
                
        end
        switch config.lg_aperture
            case 30
                lg_aperture_current = '445.0';
                lg_aperture = '1';
            case 7.5
                lg_aperture_current = '17.0';
                lg_aperture = '2';
            case 10
                lg_aperture_current = '38.0';
                lg_aperture = '3';
            case 40
                lg_aperture_current = '600';
                lg_aperture = '4';
            case 60
                lg_aperture_current = '1000';
                lg_aperture = '5';
            case 120
                lg_aperture_current = '6000';
                lg_aperture = '6';
        end
        
        f = input('Please enter run file filename without a file extension (example: DD_L2_SiGe).' ,'s');
        RunFile_Name = strcat(f,'.RF6');
        Path1 = ['C:\NPGS\Projects\RunFilesFromMATLAB\', RunFile_Name];
        Path2 = [dir, RunFile_Name];
        
        %This ensures we always have an unedited file that can take inputs
        template = config.template;
        tempNameInd = max(regexp(config.template,'\'))+1;
        tempName = config.template(tempNameInd:end);
        %'C:\Users\Nichol\Box Sync\Nichol Group\Matlab\dxf2run\RunTemplate_6Entity.RF6';
        savdir = 'C:\NPGS\Projects\RunFilesFromMATLAB';
        copyfile(template,savdir);
        movefile(['C:\NPGS\Projects\RunFilesFromMATLAB\' tempName], Path1);
        
        %read template and replace proper fields
        f = fileread(Path1);
        
        f = strrep(f,'sm_aperture_current',sm_aperture_current);
        f = strrep(f,'lg_aperture_current',lg_aperture_current);
        f = strrep(f,'cad_sm',cad_sm);
        f = strrep(f,'cad_med',cad_med);
        f = strrep(f,'cad_lg',cad_lg);
        f = strrep(f,'lg_aperture',lg_aperture);
        f = strrep(f,'sm_aperture',sm_aperture);
        f = strrep(f,'al_mag_sm',config.al_mag_sm);
        f = strrep(f,'al_mag_med',config.al_mag_med);
        f = strrep(f,'al_mag_lg',config.al_mag_lg);
        f = strrep(f,'write_mag_lg',config.write_mag_lg);
        f = strrep(f,'write_mag_sm',config.write_mag_lg);
        f = strrep(f,'init_move_x',config.init_move_x);
        f = strrep(f,'init_move_y',config.init_move_y);
        f = strrep(f,'final_move_x',config.final_move_x);
        f = strrep(f,'final_move_y',config.final_move_y);
        for i = 1:length(sm_doses)
            if any(strcmp(slayers,num2str(i)));
                f = strrep(f,['wo' num2str(i) 's'],'w'); %write option if CAD file layer has object in it: w = Normal writing, s = skip
            else
                f = strrep(f,['wo' num2str(i) 's'],'s');
            end
            dosestr_sm = ['dose_L' num2str(i) '_sm'];
            f = strrep(f,dosestr_sm, num2str(sm_doses(i)));
        end
        for i = 1:length(med_doses)
            if any(strcmp(mlayers,num2str(i)));
                f = strrep(f,['wo' num2str(i) 'm'],'w');
            else
                f = strrep(f,['wo' num2str(i) 'm'],'s');
            end
            dosestr_med = ['dose_L' num2str(i) '_med'];
            f = strrep(f,dosestr_med, num2str(med_doses(i)));
        end
        for i = 1:length(lg_doses)
            if any(strcmp(llayers,num2str(i)));
                f = strrep(f,['wo' num2str(i) 'l'],'w');
            else
                f = strrep(f,['wo' num2str(i) 'l'],'s');
            end
            dosestr_lg = ['dose_L' num2str(i) '_lg'];
            f = strrep(f,dosestr_lg, num2str(lg_doses(i)));
        end
        
        
        fid = fopen(Path1,'w');
        fprintf(fid,f);
        fclose(fid);
        
        copyfile(Path1, Path2);
        
        display(['Run file ' RunFile_Name ' created in ' Path2 ' with a backup created in ' Path1])
        
    case 'job_NPGS_NG_1PatternDT_Template'
        display(['oops... this template has not been created yet. You should make it now (or bug Elliot until he does)!']);
    case 'job_NPGS_NG_2PatternDT_Template'
        display(['oops... this template has not been created yet. You should make it now (or bug Elliot until he does)!']);
end


end

% Apply a default.
function s=def(s,f,v)
if(~isfield(s,f))
    s=setfield(s,f,v);
end
end